import React, { useState } from 'react';
import { View, Alert, TextInput, ScrollView,StyleSheet, Image, TouchableOpacity, Text, ActivityIndicator, Button } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { submitTicket } from '../Service/TicketService';
import { useNavigation } from '@react-navigation/native';
import { useAuth } from '../context/AuthContext';
import { CustomAlert } from './CustomAlert';


const UserScreen = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [description, setDescription] = useState('');
  const [image, setImage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const navigation = useNavigation();
  const { signOut } = useAuth();
const [alertConfig, setAlertConfig] = useState({
  message: '',
  buttons: [],
});
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const validateInputs = () => {
    let newErrors = {};
    if (name.length < 3) newErrors.name = 'Name must be at least 3 characters long.';
    if (!/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(email)) newErrors.email = 'Please enter a valid email address.';
    if (description.split(' ').length < 2) newErrors.description = 'Description must contain at least 2 words.';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    setErrors({})
    setIsLoading(true);
    const ticketData = {
      name,
      email,
      description,
      image,
    };

    submitTicket(ticketData)
      .then((message) => {
        setIsLoading(false);
      setAlertConfig({
        message: message,
        buttons: [
          { text: "Submit another ticket", onPress: () => {setAlertConfig({ message: '', buttons: [] });            
          setDescription('');
            setEmail('');
            setImage(null);
            setName('');
             setErrors({});
          }
 },
          { text: "Logout", onPress: () => signOut() }
        ]
      });
      });
  };

  return (
    <View style={styles.container}>
    <ScrollView>
      <TextInput
        placeholder="Name"
        value={name}
        placeholderTextColor = 'grey'
        onChangeText={(text) => {
          setName(text);
          if (errors.name && text.length >= 3) {
            setErrors({ ...errors, name: null });
          }
          validateInputs();
        }}
        style={styles.input}
      />
      {errors.name && <Text style={styles.errorText}>{errors.name}</Text>}

      <TextInput
        placeholder="Email"
        placeholderTextColor = 'grey'
        value={email}
        onChangeText={(text) => {
          setEmail(text);
          if (errors.email && /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(text)) {
            setErrors({ ...errors, email: null });
          }
          validateInputs();

        }}
        style={styles.input}
      />
      {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}

      <TextInput
        placeholder="Description of the problem"
        placeholderTextColor = 'grey'
        value={description}
        onChangeText={(text) => {
          setDescription(text);
          if (errors.description && text.split(' ').length >= 2) {
            setErrors({ ...errors, description: null });
          }
          validateInputs();
        }}
        multiline
        style={[styles.input, styles.description]}
      />
      {errors.description && <Text style={styles.errorText}>{errors.description}</Text>}

      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Text style={styles.buttonText}>Select Image</Text>
      </TouchableOpacity>
      {image && <Image source={{ uri: image }} style={styles.previewImage} />}
      {!isLoading ? (
        <TouchableOpacity
          onPress={handleSubmit}
          style={[
            styles.button,
            (!name || !email || !description || Object.keys(errors).length > 0) ? styles.buttonDisabled : {}
          ]}
          disabled={!name || !email || !description || Object.keys(errors).length > 0}
        >
          <Text style={styles.buttonText}>Submit Ticket</Text>
        </TouchableOpacity>
      ) : (
        <ActivityIndicator size="large" color="#0000ff" />
      )}
      <View style={styles.logoutButtonContainer}>
        <Button title="Logout" onPress={signOut} />
      </View>
    </ScrollView>
    <CustomAlert
      message={alertConfig.message}
      buttons={alertConfig.buttons}
    />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  input: {
    backgroundColor: '#fff',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    borderColor: '#ddd',
    borderWidth: 1,
    marginBottom: 10,
    width: '100%',
  },
  description: {
    height: 50,
    textAlignVertical: 'top',
  },
  button: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  buttonDisabled: {
    backgroundColor: '#cccccc',
  },
  previewImage: {
    width: '100%',
    height: 200,
    marginBottom: 10,
    borderRadius: 8,
  },
  logoutButtonContainer: {
    marginTop: 15,
    marginBottom: 15,
  },
  errorText: {
    color: 'red',
    marginBottom: 5,
  },
});

export default UserScreen;
