import React, { useState } from 'react';
import { View, Alert, TextInput, StyleSheet, Image, TouchableOpacity, Text, ActivityIndicator, Button } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { submitTicket } from '../Service/TicketService';
import { useNavigation } from '@react-navigation/native';
import { useAuth } from '../context/AuthContext';

const UserScreen = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [description, setDescription] = useState('');
  const [image, setImage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const navigation = useNavigation();
  const { signOut } = useAuth();

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSubmit = () => {
    setIsLoading(true);
    const ticketData = {
      name,
      email,
      description,
      image, // 'image' holds the URI of the selected image
    };

    submitTicket(ticketData)
      .then((message) => {
        setIsLoading(false);
        Alert.alert("Success", message, [
          { text: "OK", onPress: () => {
            setDescription('');
            setEmail('');
            setImage(null);
            setName('');
          }}
        ]);
      })
      .catch((error) => {
        setIsLoading(false);
        Alert.alert("Ticket submission failed", error.message);
      });
  };

  return (
    <View style={styles.container}>
      <TextInput
        placeholder="Name"
        value={name}
        onChangeText={setName}
        style={styles.input}
      />
      <TextInput
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        style={styles.input}
      />
      <TextInput
        placeholder="Description of the problem"
        value={description}
        onChangeText={setDescription}
        multiline
        style={[styles.input, styles.description]}
      />
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Text style={styles.buttonText}>Select Image</Text>
      </TouchableOpacity>
      {image && <Image source={{ uri: image }} style={styles.previewImage} />}
      {isLoading ? (
        <ActivityIndicator size="large" color="#0000ff" />
      ) : (
       <TouchableOpacity
  onPress={handleSubmit}
  style={[
    styles.button,
    (name.length < 1 || email.length < 5 || description.length < 10 || isLoading) ? styles.buttonDisabled : {}
  ]}
  disabled={name.length < 1 || email.length < 5 || description.length < 10 || isLoading}
>
  <Text style={styles.buttonText}>Submit Ticket</Text>
</TouchableOpacity>

      )}
       <View style={styles.logoutButtonContainer}>
        <Button title="Logout" onPress={signOut} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  input: {
    backgroundColor: '#fff',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    borderColor: '#ddd',
    borderWidth: 1,
    marginBottom: 10,
    width: '100%',
  },
  description: {
    height: 100,
    textAlignVertical: 'top',
  },
  button: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  buttonDisabled: {
    backgroundColor: '#cccccc', 
  },
  previewImage: {
    width: '100%',
    height: 200,
    marginBottom: 10,
    borderRadius: 8,
  },
   logoutButtonContainer: {
    marginTop: 15,
    marginBottom:15
  },
});

export default UserScreen;
